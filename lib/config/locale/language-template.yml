# Files in the config/locales directory are used for internationalization.
# If you want to use locales other than English, add the necessary files in this directory.
#
# This is the template to automate this process in the future.
#
# THANK YOU FOR MAKING LEGESHER LARGER THAN US.

# TRANSLATION LANGUAGE: this will also be the name of the file, the abbreviation of
# the language we are translating to.
language-abbreviation:
# ----------------------
# |    SYSTEM: ATOM    |
# ----------------------
# << Keywords >>
# All keywords will be capitalized because it is used for
# key information found in comments
  NOTE: ""
  INFO: ""
  IDEA: ""
  DEBUG: ""
  REMOVE: ""
  OPTIMIZE: ""
  REVIEW: ""
  HACK: ""
  UNDONE: ""
  TODO: ""
  REFACTOR: ""
  DEPRECATED: ""
  TASK: ""
  CHGME: ""
  NOTREACHED: ""
  WTF: ""
  BUG: ""
  ERROR: ""
  OMG: ""
  ERR: ""
  OMFGRLY: ""
  WARNING: ""
  WARN: ""
  BROKEN: ""

# ----------------------
# |   LANGUAGE: AGDA   |
# ----------------------
# NOTE: https://agda.readthedocs.io/en/v2.5.4.2/index.html
# << Keywords >>
  abstract: ""
  codata: ""
  coinductive: ""
  constructor: ""
  data: ""
  do: ""
  eta-equality: ""
  field: ""
  forall: ""
  hiding: ""
  import: ""
  in: ""
  inductive: ""
  infix: ""
  infixl: ""
  infixr: ""
  instance: ""
  let: ""
  macro: ""
  module: ""
  mutual: ""
  no-eta-equality: ""
  open: ""
  overlap: ""
  pattern: ""
  postulate: ""
  primitive: ""
  private: ""
  public: ""
  quote: ""
  quoteContext: ""
  quoteGoal: ""
  quoteTerm: ""
  record: ""
  renaming: ""
  rewrite: ""
  Set: "" # can appear with a number suffix, optionally suffixed, make sure we account for this
  syntax: ""
  tactic: ""
  unquote: ""
  unquoteDecl: ""
  unquoteDef: ""
  using: ""
  where: ""
  with: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE: AFL    |
# ----------------------
# Amibroker Formula Language
# NOTE: https://www.amibroker.com/guide/a_language.html

# << Keywords >>
do: "" # (part of do-while statement)
while: ""
for: ""
if: "" # (part of if-else statement)
else: "" # (part of if-else statement)
switch: ""
break: "" # (part of the switch statement or for/while statements)
case: "" # (part of the switch statement)
continue: "" # (part of for/while statements)
default: "" # (part of switch statement)
function: ""
procedure: ""
return: ""
local: ""
global: ""
static: ""
typeof: ""
NOT: ""
AND: ""
OR: ""
Null: ""
# << Error Messages >>

# ----------------------
# |   LANGUAGE: BASH   |
# ----------------------
# << Keywords >>

# << Error Messages >>

# ----------------------
# |   LANGUAGE: C      |
# ----------------------
# << Keywords >>
auto: ""
double: ""
int: ""
struct: ""
break: ""
else: ""
long: ""
switch: ""
case: ""
enum: ""
register: ""
typedef: ""
char: ""
extern: ""
return: ""
union: ""
const: ""
float: ""
short: ""
unsigned: ""
continue: ""
for: ""
signed: ""
void: ""
default: ""
goto: ""
sizeof: ""
volatile: ""
do: ""
if: ""
static: ""
while: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE:  C++   |
# ----------------------
# << Keywords >>

#define: ""
#defined: ""
#elif: ""
#else: ""
#endif: ""
#error: ""
#if: ""
#ifdef: ""
#ifndef: ""
#include: ""
#line: ""
#pragma: ""
#undef: ""
alignas: ""
alignof: ""
and: ""
and_eq: ""
asm: ""
atomic_cancel: ""
atomic_commit: ""
atomic_noexcept: ""
auto: ""
bitand: ""
bitor: ""
bool: ""
break: ""
case: ""
catch: ""
char: ""
char16_t: ""
char32_t: ""
class: ""
compl: ""
concept: ""
const: ""
constexpr: ""
const_cast: ""
continue: ""
decltype: ""
default: ""
delete: ""
do: ""
double: ""
dynamic_cast: ""
else: ""
enum: ""
explicit: ""
export: ""
extern: ""
false: ""
final: ""
float: ""
for: ""
friend: ""
goto: ""
if: ""
inline: ""
int: ""
import: ""
long: ""
module: ""
mutable: ""
namespace: ""
new: ""
noexcept: ""
not: ""
not_eq: ""
nullptr: ""
operator: ""
or: ""
or_eq: ""
override: ""
private: ""
protected: ""
public: ""
register: ""
reinterpret_cast: ""
requires: ""
return: ""
short: ""
signed: ""
sizeof: ""
static: ""
static_assert: ""
static_cast: ""
struct: ""
switch: ""
synchronized: ""
template: ""
this: ""
thread_local: ""
throw: ""
transaction_safe: ""
transaction_safe_dynamic: ""
true: ""
try: ""
typedef: ""
typeid: ""
typename: ""
union: ""
unsigned: ""
using: ""
virtual: ""
void: ""
volatile: ""
wchar_t: ""
while: ""
xor: ""
xor_eq: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE: C#     |
# ----------------------
# << Keywords >>
abstract: ""
add: ""
alias: ""
as: ""
ascending: ""
async: ""
await: ""
base: ""
bool: ""
break: ""
byte: ""
case: ""
catch: ""
char: ""
checked: ""
class: ""
const: ""
continue: ""
decimal: ""
default: ""
delegate: ""
descending: ""
do: ""
double: ""
dynamic: ""
else: ""
enum: ""
event: ""
explicit: ""
extern: ""
false: ""
finally: ""
fixed: ""
float: ""
for: ""
foreach: ""
from: ""
get: ""
global: ""
goto: ""
group: ""
if: ""
implicit: ""
in: ""
int: ""
interface: ""
internal: ""
into: ""
is: ""
join: ""
let: ""
lock: ""
long: ""
namespace: ""
new: ""
null: ""
object: ""
operator: ""
orderby: ""
out: ""
override: ""
params: ""
partial: ""
private: ""
protected: ""
public: ""
readonly: ""
ref: ""
remove: ""
return: ""
sbyte: ""
sealed: ""
select: ""
set: ""
short: ""
sizeof: ""
stackalloc: ""
static: ""
string: ""
struct: ""
switch: ""
this: ""
throw: ""
true: ""
try: ""
typeof: ""
uint: ""
ulong: ""
unchecked: ""
unsafe: ""
ushort: ""
using: ""
value: ""
var: ""
virtual: ""
void: ""
volatile: ""
where: ""
while: ""
yield: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE: CSS    |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ------------------------
# |   LANGUAGE: FLUENT   |
# ------------------------
# << Keywords >>
# << Error Messages >>

# ------------------------
# |   LANGUAGE: GOLANG   |
# ------------------------
# << Keywords >>
break: ""
default: ""
func: ""
interface: ""
select: ""
case: ""
defer: ""
go: ""
map: ""
struct: ""
chan: ""
else: ""
goto: ""
package: ""
switch: ""
const: ""
fallthrough: ""
if: ""
range: ""
type: ""
continue: ""
for: ""
import: ""
return: ""
var: ""

# << Error Messages >>

# -------------------------
# |   LANGUAGE: HASKELL   |
# -------------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: HTML   |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: JAVA   |
# ----------------------
# << Keywords >>
abstract: ""
continue: ""
for: ""
new: ""
switch: ""
assert: ""
default: ""
goto: ""
package: ""
synchronized: ""
boolean: ""
do: ""
if: ""
private: ""
this: ""
break: ""
double: ""
implements: ""
protected: ""
throw: ""
byte: ""
else: ""
import: ""
public: ""
throws: ""
case: ""
enum: ""
instanceof: ""
return: ""
transient: ""
catch: ""
extends: ""
int: ""
short: ""
try: ""
char: ""
final: ""
interface: ""
static: ""
void: ""
class: ""
finally: ""
long: ""
strictfp: ""
volatile: ""
const: ""
float: ""
native: ""
super: ""
while: ""
_: "" #_(underscore)

# << Error Messages >>

# ----------------------------
# |   LANGUAGE: JAVASCRIPT   |
# ----------------------------
# << Keywords >>
arguments: ""
await: ""
break: ""
case: ""
catch: ""
class: ""
const: ""
continue: ""
debugger: ""
default: ""
delete: ""
do: ""
else: ""
enum: ""
eval: ""
export: ""
extends: ""
false: ""
finally: ""
for: ""
from: ""
function: ""
if: ""
implements: ""
import: ""
in: ""
instanceof: ""
interface: ""
let: ""
new: ""
null: ""
package: ""
private: ""
protected: ""
public: ""
return: ""
static: ""
super: ""
switch: ""
this: ""
throw: ""
true: ""
try: ""
typeof: ""
var: ""
void: ""
while: ""
with: ""
yield: ""
# << Error Messages >>

# ----------------------
# |   LANGUAGE: JULIA  |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: JSDOC  |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: JSON   |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: NODE   |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: OCAML  |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: PHP    |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |  LANGUAGE: PYTHON  |
# ----------------------
# << Keywords >>
  False: ""
  None: ""
  True: ""
  and: ""
  as: ""
  assert: ""
  async: ""
  await: ""
  break: ""
  class: ""
  continue: ""
  def: ""
  del: ""
  elif: ""
  else: ""
  except: ""
  finally: ""
  for: ""
  from: ""
  global:  ""
  if: ""
  import: ""
  in: ""
  is: ""
  lambda: ""
  nonlocal: ""
  not: ""
  or: ""
  pass: ""
  raise: ""
  return: ""
  try: ""
  while: ""
  with: ""
  yield: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE: RAZOR   |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: REGEX  |
# ----------------------
# << Keywords >>
# << Error Messages >>

# ----------------------
# |   LANGUAGE: RUBY   |
# ----------------------
# << Keywords >>
alias: ""
and: ""
begin: ""
break: ""
case: ""
class: ""
def: ""
defined?: ""
do: ""
else: ""
elsif: ""
end: ""
ensure: ""
false: ""
for: ""
if: ""
in: ""
module: ""
next: ""
nil: ""
not: ""
or: ""
redo: ""
rescue: ""
retry: ""
return: ""
self: ""
super: ""
then: ""
true: ""
undef: ""
unless: ""
until: ""
when: ""
while: ""
yield: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE:  RUST  |
# ----------------------
# << Keywords >>

_: ""
abstract: ""
alignof: ""
as: ""
become: ""
box: ""
break: ""
const: ""
continue: ""
crate: ""
do: ""
else: ""
enum: ""
extern: ""
false: ""
final: ""
fn: ""
for: ""
if: ""
impl: ""
in: ""
let: ""
loop: ""
macro: ""
match: ""
mod: ""
move: ""
mut: ""
offsetof: ""
override: ""
priv: ""
proc: ""
pub: ""
pure: ""
ref: ""
return: ""
Self: ""
self: ""
sizeof: ""
static: ""
struct: ""
super: ""
trait: ""
true: ""
type: ""
typeof: ""
unsafe: ""
unsized: ""
use: ""
virtual: ""
where: ""
while: ""
yield: ""

# << Error Messages >>

# ----------------------
# |   LANGUAGE: SCALA  |
# ----------------------
# << Keywords >>
abstract: ""
case: ""
catch: ""
class: ""
def: ""
do: ""
else: ""
extends: ""
false: ""
final: ""
finally: ""
for: ""
forSome: ""
if: ""
implicit: ""
import: ""
lazy: ""
macro: ""
match: ""
new: ""
null: ""
object: ""
override: ""
package: ""
private: ""
protected: ""
return: ""
sealed: ""
super: ""
this: ""
throw: ""
trait: ""
try: ""
true: ""
type: ""
val: ""
var: ""
while: ""
with: ""
yield: ""
# << Error Messages >>

# ----------------------
# |   LANGUAGE: SWIFT   |
# ----------------------
# << Keywords >>
associatedtype: ""
class: ""
deinit: ""
enum: ""
extension: ""
func: ""
import: ""
init: ""
inout: ""
internal: ""
let: ""
operator: ""
private: ""
protocol: ""
public: ""
static: ""
struct: ""
subscript: ""
typealias: ""
var: ""
break: ""
case: ""
continue: ""
default: ""
defer: ""
do: ""
else: ""
fallthrough: ""
for: ""
guard: ""
if: ""
in: ""
repeat: ""
return: ""
switch: ""
where: ""
while: ""
as: ""
catch: ""
dynamicType: ""
false: ""
is: ""
nil: ""
rethrows: ""
super: ""
self: ""
Self: ""
throw: ""
throws: ""
true: ""
try: ""
#column: ""
#file: ""
#function: ""
#line: ""
#available: ""
#column: ""
#else: ""
#elseif: ""
#endif: ""
#file: ""
#function: ""
#if: ""
#line: ""
#selector: ""
associativity: ""
convenience: ""
dynamic: ""
didSet: ""
final: ""
get: ""
infix: ""
indirect: ""
lazy: ""
left: ""
mutating: ""
none: ""
nonmutating: ""
optional: ""
override: ""
postfix: ""
precedence: ""
prefix: ""
Protocol: ""
required: ""
right: ""
set: ""
Type: ""
unowned: ""
weak: ""
willSet: ""

# << Error Messages >>

# ---------------------------
# |   LANGUAGE: TYPESCRIPT  |
# ---------------------------
# << Keywords >>
# << Error Messages >>

# ------------------------
# |   LANGUAGE: VERILOG  |
# ------------------------
# << Keywords >>
# << Error Messages >>

# ------------------------------------
# |   CONTENT: LEGESHER.IO WEBSITE   |
# ------------------------------------
# TODO: add home page translations
# TODO: add tutorials
# TODO: add other content
